An attempt at a server using libusb 1.0 synchronous API.


The server program in the ghpsdr3 suite of programs is the the program that forms the interface to the hardware. One instance o this program must be running to communicate with one of the HPSDR communication boards (OZY, MAGISTER, or METIS).

Currently the server program is a command line program and it has several options.

--receivers (1|2|3|4)

    receivers (note the plural) is the number of simultaneous receiver you want to monitor from your receiver card. the use of this option is dependent on the version of the FPGA code you are using. All versions support one receiver. Bruce Walkers FPGA code supports 4 receivers. 

--samplerate (48000|96000|192000)

    samplerate is the rate at which you want the HPSDR hardware to sample the incoming signals. 

--dither (off|on)

    dither turns on or off the hardware dither option. 

--random (off|on)

    random turns on or off the hardware random option. 

--preamp (off|on)

    preamp turns on or off the hardware preamp option. 

--10mhzsource (atlas|penelope|mercury)

    10mhzsource sets the source of the 10 mHz clock source, options include off the ATLAS buss for example from EXCALIBUR, from PENELOPE or from MERCURY. 

--122.88mhzsource (atlas|penelope|mercury)

    122.88mhzsource sets the source of the 122.88 mHz clock source, options include off the ATLAS buss for example from EXCALIBUR, from PENELOPE or from MERCURY. 

--micsource (janus|penelope)

    micsource sets the source of the microphone source, options include from JANUS or from PENELOPE. 

--class (other|E)

    class sets the class of power amplifier used. (Options are incomplete). 

--timing (1)

    timing sets the timing used. (Options are incomplete). 

--metis

    use Metis ethernet interface rather than Ozy USB.

--interface <interface>

    specify ethernet interface to use for Metis (default eth0).

--hermes

    interfaces Hermes via Ethernet (requires 2.2 firmware)



How to run an Hermes server
===========================

The Hermes hardware needs some especially suited changes to both hpsdr_server and dspserver.

First off, please note that Hermes can be operated with ghpsdr3-alex in two different modes:

 - local
 - remote


In both modes the samplerates available are 48000, 96000, 192000 and 384000 S/s.
(The 384kS/s samplerate is available starting since firmware version 2.2)

Keep in mind that the latter two require a quite powerful computer.


Local mode
==========

In this mode the microphone and the headphone have to be connected to Hermes and QtRadio GUI is
used mainly for display the spectrum and the waterfall and in order to operate the tx via the MOX button.
Another important command available is the Drive slider in the TX tab of QtRadio hardware window.

In three separate xterm windows, run the following command, in the order shown below:

  hpsdr-server  --hermes 0 --samplerate 96000

  dspserver --lo 0  --hpsdrloc --nocorrectiq 

  QtRadio 127.0.0.1


The audio is available both from local audio system (where QtRadio is running) and from headphone socket on Hermes,
but you will experience a noticeable delay in QtRadio.



Remote Mode
===========


In this mode the microphone audio is taken from QtRadio, processed in dspserver and sent back to the hardware, so you can operate
an Hermes that stands in a fully remote location, together with a PC running dspserver and hpsdr_server.

The audio is available both from local audio system (where QtRadio is running) and from headphone socket on Hermes.

In the PC near to Hermes open two xterm windows, and run the following command:


  hpsdr-server  --hermes 0 --samplerate 96000

  dspserver --lo 0  --hpsdr --nocorrectiq 


In another PC run

  QtRadio 

and select from the server list your radio.
If the two systems are on the same private network, specify the server address directly in the QtRadio
command line (as in the Local case).

In case you decide to make Hermes available on the Internet, you can select your server directly from
the server list. 
In this case, take care to configure the dspserver.conf in order to avoid unintended accesses to your radio.

Of course, in remote mode, you can even run everything in the same PC, just make sure you have a powerful 
enough CPU.





